import numpy as np

def taylor(input, coefficients):
    c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63, c64, c65, c66, c67, c68, c69, c70, c71, c72, c73, c74, c75, c76, c77, c78, c79, c80, c81, c82, c83, c84 = coefficients
    x, y, z = input
    x, y, z = (x - 3.5), (y - 2.5), (z - 3.4)
    T0 = c1
    T1 = c2 * x + c3 * y + c4 * z
    T2 = c5 / 2 * x ** 2 + c6 / 2 * y ** 2 + c7 * z ** 2 + c8 * x * y + c9 * x * z + c10 * y * z
    T3 = c11 / 6 * x ** 3 + c12 / 2 * x ** 2 * y + c13 / 2 * x ** 2 * z + c14 / 6 * y ** 3 + c15 / 2 * y ** 2 * x + c16 / 2 * y ** 2 * z + c17 / 6 * z ** 3 + c18 / 2 * z ** 2 * x + c19 / 2 * z ** 2 * y + c20 * x * y * z
    T4 = c21 / 24 * x ** 4 + c22 / 6 * x ** 3 * y + c23 / 6 * x ** 3 * z + c24 / 4 * x ** 2 * y ** 2 + c25 / 2 * x ** 2 * y * z + c26 / 4 * x ** 2 * z ** 2 + c27 / 6 * x * y ** 3 + c28 / 2 * x * y ** 2 * z + c29 / 2 * x * y * z ** 2 + c30 / 6 * x * z ** 3 + c31 / 24 * y ** 4 + c32 / 6 * y ** 3 * z + c33 / 4 * y ** 2 * z ** 2 + c34 / 24 * z ** 4 + c35 / 6 * z ** 3 * y
    T5 = c36 / 120 * x ** 5 + c37 / 24 * x ** 4 * y + c38 / 24 * x ** 4 * z + c39 / 12 * x ** 3 * y ** 2 + c40 / 6 * x ** 3 * y * z + c41 / 12 * x ** 3 * z ** 2 + c42 / 12 * x ** 2 * y ** 3 + c43 / 4 * x ** 2 * y ** 2 * z + c44 / 4 * x ** 2 * y * z ** 2 + c45 / 12 * x ** 2 * z ** 3 + c46 / 24 * x * y ** 4 + c47 / 6 * x * y ** 3 * z + c48 / 4 * x * y ** 2 * z ** 2 + c49 / 6 * x * y * z ** 3 + c50 / 24 * x * z ** 4 + c51 / 120 * y ** 5 + c52 / 24 * y ** 4 * z + c53 / 12 * y ** 3 * z ** 2 + c54 / 12 * y ** 2 * z ** 3 + c55 / 24 * y * z ** 4 + c56 / 120 * z ** 5
    T6 = c57 / 640 * x ** 6 + c58 / 120 * x ** 5 * y + c59 / 120 * x ** 5 * z + c60 / 640 * y ** 6 + c61 / 120 * y ** 5 * x + c62 / 120 * y ** 5 * z + c63 / 640 * z ** 6 + c64 / 120 * z ** 5 * x + c65 / 120 * z ** 5 * y + c66 / 48 * x ** 4 * y ** 2 + c67 / 48 * x ** 4 * z ** 2 + c68 / 48 * y ** 4 * x ** 2 + c69 / 48 * y ** 4 * z ** 2 + c70 / 48 * z ** 4 * x * 2 + c71 / 48 * z ** 4 * y ** 2 + c72 / 24 * x ** 4 * y * z + c73 / 24 * y ** 4 * x * z + c74 / 24 * z ** 4 * x * y + c75 / 36 * x ** 3 * y ** 3 + c76 / 36 * x ** 3 * z ** 3 + c77 / 36 * y ** 3 * z ** 3 + c78 / 12 * x ** 3 * y ** 2 * z + c79 / 12 * x ** 3 * y * z ** 2 + c80 / 12 * x ** 2 * y ** 3 * z + c81 / 12 * x * y ** 3 * z ** 2 + c82 / 12 * x ** 2 * y * z ** 3 + c83 / 12 * x * y ** 2 * z ** 3 + c84 / 8 * x ** 2 * y ** 2 * z ** 2
    f = T0 + T1 + T2 + T3 + T4 + T5 + T6
    return f


def tayloropt(input, para, p):
    c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63, c64, c65, c66, c67, c68, c69, c70, c71, c72, c73, c74, c75, c76, c77, c78, c79, c80, c81, c82, c83, c84 = para.data
    x, y, z = input
    x, y, z = (x - 3.5), (y - 2.5), (z - 3.4)
    T0 = c1
    T1 = c2 * x + c3 * y + c4 * z
    T2 = c5 / 2 * x ** 2 + c6 / 2 * y ** 2 + c7 * z ** 2 + c8 * x * y + c9 * x * z + c10 * y * z
    T3 = c11 / 6 * x ** 3 + c12 / 2 * x ** 2 * y + c13 / 2 * x ** 2 * z + c14 / 6 * y ** 3 + c15 / 2 * y ** 2 * x + c16 / 2 * y ** 2 * z + c17 / 6 * z ** 3 + c18 / 2 * z ** 2 * x + c19 / 2 * z ** 2 * y + c20 * x * y * z
    T4 = c21 / 24 * x ** 4 + c22 / 6 * x ** 3 * y + c23 / 6 * x ** 3 * z + c24 / 4 * x ** 2 * y ** 2 + c25 / 2 * x ** 2 * y * z + c26 / 4 * x ** 2 * z ** 2 + c27 / 6 * x * y ** 3 + c28 / 2 * x * y ** 2 * z + c29 / 2 * x * y * z ** 2 + c30 / 6 * x * z ** 3 + c31 / 24 * y ** 4 + c32 / 6 * y ** 3 * z + c33 / 4 * y ** 2 * z ** 2 + c34 / 24 * z ** 4 + c35 / 6 * z ** 3 * y
    T5 = c36 / 120 * x ** 5 + c37 / 24 * x ** 4 * y + c38 / 24 * x ** 4 * z + c39 / 12 * x ** 3 * y ** 2 + c40 / 6 * x ** 3 * y * z + c41 / 12 * x ** 3 * z ** 2 + c42 / 12 * x ** 2 * y ** 3 + c43 / 4 * x ** 2 * y ** 2 * z + c44 / 4 * x ** 2 * y * z ** 2 + c45 / 12 * x ** 2 * z ** 3 + c46 / 24 * x * y ** 4 + c47 / 6 * x * y ** 3 * z + c48 / 4 * x * y ** 2 * z ** 2 + c49 / 6 * x * y * z ** 3 + c50 / 24 * x * z ** 4 + c51 / 120 * y ** 5 + c52 / 24 * y ** 4 * z + c53 / 12 * y ** 3 * z ** 2 + c54 / 12 * y ** 2 * z ** 3 + c55 / 24 * y * z ** 4 + c56 / 120 * z ** 5
    T6 = c57 / 640 * x ** 6 + c58 / 120 * x ** 5 * y + c59 / 120 * x ** 5 * z + c60 / 640 * y ** 6 + c61 / 120 * y ** 5 * x + c62 / 120 * y ** 5 * z + c63 / 640 * z ** 6 + c64 / 120 * z ** 5 * x + c65 / 120 * z ** 5 * y + c66 / 48 * x ** 4 * y ** 2 + c67 / 48 * x ** 4 * z ** 2 + c68 / 48 * y ** 4 * x ** 2 + c69 / 48 * y ** 4 * z ** 2 + c70 / 48 * z ** 4 * x * 2 + c71 / 48 * z ** 4 * y ** 2 + c72 / 24 * x ** 4 * y * z + c73 / 24 * y ** 4 * x * z + c74 / 24 * z ** 4 * x * y + c75 / 36 * x ** 3 * y ** 3 + c76 / 36 * x ** 3 * z ** 3 + c77 / 36 * y ** 3 * z ** 3 + c78 / 12 * x ** 3 * y ** 2 * z + c79 / 12 * x ** 3 * y * z ** 2 + c80 / 12 * x ** 2 * y ** 3 * z + c81 / 12 * x * y ** 3 * z ** 2 + c82 / 12 * x ** 2 * y * z ** 3 + c83 / 12 * x * y ** 2 * z ** 3 + c84 / 8 * x ** 2 * y ** 2 * z ** 2
    f = T0 + T1 + T2 + T3 + T4 + T5 + T6
    return f


def taylorfit(input, para, p):
    c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35, c36, c37, c38, c39, c40, c41, c42, c43, c44, c45, c46, c47, c48, c49, c50, c51, c52, c53, c54, c55, c56, c57, c58, c59, c60, c61, c62, c63, c64, c65, c66, c67, c68, c69, c70, c71, c72, c73, c74, c75, c76, c77, c78, c79, c80, c81, c82, c83, c84 = input
    dist = []
    for k in range(len(para.data)):
        x, y, z = para.data[k][0], para.data[k][1], para.data[k][2]
        x, y, z = (x - 3.5), (y - 2.5), (z - 3.4)
        T0 = c1
        T1 = c2 * x + c3 * y + c4 * z
        T2 = c5 / 2 * x ** 2 + c6 / 2 * y ** 2 + c7 * z ** 2 + c8 * x * y + c9 * x * z + c10 * y * z
        T3 = c11 / 6 * x ** 3 + c12 / 2 * x ** 2 * y + c13 / 2 * x ** 2 * z + c14 / 6 * y ** 3 + c15 / 2 * y ** 2 * x + c16 / 2 * y ** 2 * z + c17 / 6 * z ** 3 + c18 / 2 * z ** 2 * x + c19 / 2 * z ** 2 * y + c20 * x * y * z
        T4 = c21 / 24 * x ** 4 + c22 / 6 * x ** 3 * y + c23 / 6 * x ** 3 * z + c24 / 4 * x ** 2 * y ** 2 + c25 / 2 * x ** 2 * y * z + c26 / 4 * x ** 2 * z ** 2 + c27 / 6 * x * y ** 3 + c28 / 2 * x * y ** 2 * z + c29 / 2 * x * y * z ** 2 + c30 / 6 * x * z ** 3 + c31 / 24 * y ** 4 + c32 / 6 * y ** 3 * z + c33 / 4 * y ** 2 * z ** 2 + c34 / 24 * z ** 4 + c35 / 6 * z ** 3 * y
        T5 = c36 / 120 * x ** 5 + c37 / 24 * x ** 4 * y + c38 / 24 * x ** 4 * z + c39 / 12 * x ** 3 * y ** 2 + c40 / 6 * x ** 3 * y * z + c41 / 12 * x ** 3 * z ** 2 + c42 / 12 * x ** 2 * y ** 3 + c43 / 4 * x ** 2 * y ** 2 * z + c44 / 4 * x ** 2 * y * z ** 2 + c45 / 12 * x ** 2 * z ** 3 + c46 / 24 * x * y ** 4 + c47 / 6 * x * y ** 3 * z + c48 / 4 * x * y ** 2 * z ** 2 + c49 / 6 * x * y * z ** 3 + c50 / 24 * x * z ** 4 + c51 / 120 * y ** 5 + c52 / 24 * y ** 4 * z + c53 / 12 * y ** 3 * z ** 2 + c54 / 12 * y ** 2 * z ** 3 + c55 / 24 * y * z ** 4 + c56 / 120 * z ** 5
        T6 = c57 / 640 * x ** 6 + c58 / 120 * x ** 5 * y + c59 / 120 * x ** 5 * z + c60 / 640 * y ** 6 + c61 / 120 * y ** 5 * x + c62 / 120 * y ** 5 * z + c63 / 640 * z ** 6 + c64 / 120 * z ** 5 * x + c65 / 120 * z ** 5 * y + c66 / 48 * x ** 4 * y ** 2 + c67 / 48 * x ** 4 * z ** 2 + c68 / 48 * y ** 4 * x ** 2 + c69 / 48 * y ** 4 * z ** 2 + c70 / 48 * z ** 4 * x * 2 + c71 / 48 * z ** 4 * y ** 2 + c72 / 24 * x ** 4 * y * z + c73 / 24 * y ** 4 * x * z + c74 / 24 * z ** 4 * x * y + c75 / 36 * x ** 3 * y ** 3 + c76 / 36 * x ** 3 * z ** 3 + c77 / 36 * y ** 3 * z ** 3 + c78 / 12 * x ** 3 * y ** 2 * z + c79 / 12 * x ** 3 * y * z ** 2 + c80 / 12 * x ** 2 * y ** 3 * z + c81 / 12 * x * y ** 3 * z ** 2 + c82 / 12 * x ** 2 * y * z ** 3 + c83 / 12 * x * y ** 2 * z ** 3 + c84 / 8 * x ** 2 * y ** 2 * z ** 2
        f = T0 + T1 + T2 + T3 + T4 + T5 + T6
        dist.append((f - para.data[k][3]) ** 2)
    return np.array(dist).sum()

def interpolate(input, data):
    x = []
    y = []
    z = []
    f = []
    for i in range(len(data)):
        x.append(data[i][0])
        y.append(data[i][1])
        z.append(data[i][2])
        f.append(data[i][3])
    p = []
    for j in range(len(data)):
        l = 1
        for k in range(len(data)):
            if k != j:
                l *= ((input[0] - x[k]) / (x[j] - x[k])) * ((input[1] - y[k]) / (y[j] - y[k])) * (
                        (input[2] - z[k]) / (z[j] - z[k]))
        p.append(f[j] * l)
    p = np.array(p)
    eval = p.sum()
    return eval

def optquad(input, para, p):
    a1, a2, a3, a4, a5, a6 = para.data
    x = np.array(input)
    A = np.array([[a1, a2, a3],
                  [0, a4, a5],
                  [0, 0, a6]])
    return np.dot(x, np.dot(A, x))

def quad(input, coefficients):
    a1, a2, a3, a4, a5, a6 = coefficients
    x = np.array(input)
    A = np.array([[a1, a2, a3],
                  [0, a4, a5],
                  [0, 0, a6]])
    return np.dot(x, np.dot(A, x))
